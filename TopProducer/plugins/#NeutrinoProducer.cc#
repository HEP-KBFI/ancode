#include "AnalysisCode/AnalysisDataFormats/interface/Neutrino.h"
#include "AnalysisCode/AnalysisDataFormats/interface/NeutrinoFwd.h"
#include "AnalysisCode/TopProducer/plugins/NeutrinoProducer.h"
//#include "AnalysisDataFormats/SingleTopAnalysis/interface/HtRatio.h"
//#include "AnalysisDataFormats/SingleTopAnalysis/interface/HtRatioFwd.h"

#include "DataFormats/Common/interface/Handle.h"
#include "DataFormats/Common/interface/View.h"
#include "DataFormats/Common/interface/Ptr.h"

#include "DataFormats/Candidate/interface/CandidateFwd.h" 
#include "DataFormats/Candidate/interface/Candidate.h" 
#include "DataFormats/PatCandidates/interface/MET.h"
#include "DataFormats/PatCandidates/interface/Jet.h"

#include "AnalysisCode/TopProducer/interface/FetchCollection.h"

NeutrinoProducer::NeutrinoProducer(const edm::ParameterSet& cfg)
  : algorithm_(cfg)
{
  srcLepton_ = cfg.getParameter<edm::InputTag>("srcLepton");
  srcMET_ = cfg.getParameter<edm::InputTag>("srcMET");
  
  produces<NeutrinoCollection>("");
}

NeutrinoProducer::~NeutrinoProducer()
{
  //--- nothing to be done yet...
}

void NeutrinoProducer::produce(edm::Event& evt, const edm::EventSetup& es)
{
  typedef edm::View<pat::MET> MEtView;
  edm::Handle<MEtView> metCollection;
  pf::fetchCollection(metCollection, srcMET_, evt);

//--- check that there is exactly one MET object in the event----//
  
  if ( metCollection->size() == 1 ) {edm::Ptr<pat::MET> metPtr = metCollection->ptrAt(0);} 
  else {
    edm::LogError ("produce") 
      << " Found " << metCollection->size() << " MET objects in collection = " << srcMET_;
    return;
  }

  typedef edm::View<reco::Candidate> leptonCollectionType;
  edm::Handle<leptonCollectionType> leptonCollection;
  pf::fetchCollection(leptonCollection, srcLepton_, evt);


  
  std::auto_ptr<NeutrinoCollection> neutrinoCollection(new NeutrinoCollection());
  
  for ( unsigned iLepton = 0, numLeptons = leptonCollection->size(); iLepton < numLeptons; ++iLepton ){
    edm::Ptr<reco::Candidate> leptonPtr = leptonCollection->ptrAt(iLepton);
    edm::Ptr<pat::MET> metPtr = metCollection->ptrAt(0);
    Neutrino neutrino = algorithm_.buildNeutrino(leptonPtr, metPtr);
    neutrinoCollection->push_back(neutrino);
  }
 
  evt.put(neutrinoCollection);
}

#include "FWCore/Framework/interface/MakerMacros.h"

DEFINE_FWK_MODULE(NeutrinoProducer);
